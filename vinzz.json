<!doctype html>
<html lang="id">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Overlay GUI ‚Äî Fixed</title>
<style>
  :root{
    --panel-w:380px;
    --panel-bg: rgba(12,14,18,0.52);
    --glass: rgba(255,255,255,0.04);
    --accent: #4ea8ff;
    --text: #e6eef8;
    --muted: rgba(230,238,248,0.7);
  }
  html,body{height:100%;margin:0;font-family:Inter,system-ui,Segoe UI,Roboto,Arial;color:var(--text);-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;}

/* wrapper */
.overlay{
  position:fixed;
  left:0; top:0; width:100%; height:100%;
  pointer-events:none;
  z-index:2147483647;
}

/* panel positioned with transform, pointer-events enabled */
.panel-wrap{
  position:absolute;
  left:0; top:0;
  width:var(--panel-w); max-width:94vw;
  pointer-events:auto;
  touch-action:none;
}
.panel{
  border-radius:12px;
  background:var(--panel-bg);
  backdrop-filter:blur(8px) saturate(120%);
  box-shadow:0 12px 40px rgba(4,6,12,0.6);
  overflow:hidden;
  border:1px solid rgba(255,255,255,0.03);
  transition:box-shadow 120ms;
}
.panel.dragging{ transition:none; }

/* header */
.hdr{display:flex;align-items:center;gap:10px;padding:10px 12px;cursor:grab}
.hdr .left{display:flex;flex-direction:column}
.title{font-weight:700;font-size:15px}
.meta{font-size:12px;color:var(--muted)}
.actions{margin-left:auto;display:flex;gap:8px}
.btn{background:var(--glass);border:none;padding:8px 10px;border-radius:9px;color:var(--text);cursor:pointer;font-size:13px;display:inline-flex;align-items:center;gap:6px}
.btn:active{transform:translateY(1px)}

/* tabs */
.tabs{display:flex;gap:6px;padding:8px 10px;overflow:auto;border-bottom:1px solid rgba(255,255,255,0.02)}
.tab{padding:8px 12px;border-radius:9px;cursor:pointer;font-weight:600;font-size:13px;background:transparent;flex:0 0 auto;color:var(--text)}
.tab.active{background:linear-gradient(90deg,rgba(78,168,255,0.16),rgba(78,168,255,0.06));}

/* body - horizontal scroll area for action buttons */
.body{
  padding:12px;
  max-height:140px;
  overflow-x:auto;
  overflow-y:hidden;
  white-space:nowrap;
  -webkit-overflow-scrolling:touch;
}
.panel-row{
  display:inline-flex;
  flex-wrap:nowrap;
  gap:10px;
  padding-bottom:6px;
}
.action-btn{
  display:inline-block;
  padding:10px 14px;
  border-radius:10px;
  border:0;
  background:rgba(255,255,255,0.06);
  color:var(--text);
  cursor:pointer;
  white-space:nowrap;
  flex:0 0 auto;
}

/* editor */
.editor{padding:10px;border-top:1px solid rgba(255,255,255,0.03);display:flex;gap:8px;align-items:center}
.input{flex:1;padding:10px;border-radius:10px;border:0;background:rgba(255,255,255,0.02);color:var(--text);font-size:14px}
.select{max-width:160px;padding:9px;border-radius:8px;border:0;background:rgba(255,255,255,0.02);color:var(--text)}

/* helper */
.toast{position:fixed;right:18px;bottom:18px;padding:10px 14px;border-radius:10px;background:#07121a;color:var(--text);box-shadow:0 8px 24px rgba(0,0,0,0.45);z-index:9999999}
._ov_highlight{outline:3px solid rgba(78,168,255,0.7);outline-offset:2px;background:linear-gradient(180deg,rgba(78,168,255,0.04),rgba(78,168,255,0.01))}

@media (max-width:480px){
  :root{--panel-w:86vw}
  .body{max-height:120px}
}
</style>
</head>
<body>

<div class="overlay" id="overlay">
  <div class="panel-wrap" id="panelWrap">
    <div class="panel" id="panel" role="dialog" aria-label="overlay-gui">
      <div class="hdr" id="hdr">
        <div class="left">
          <div class="title">Overlay GUI</div>
          <div class="meta">Draggable ‚Ä¢ Tabs ‚Ä¢ Swipe actions</div>
        </div>
        <div class="actions">
          <button class="btn" id="inspectBtn" title="Inspect element">üîç</button>
          <button class="btn" id="addTabBtn" title="Add tab">‚ûï Tab</button>
          <button class="btn" id="saveBtn" title="Save">üíæ</button>
          <button class="btn" id="minBtn" title="Minimize">‚Äî</button>
          <button class="btn" id="closeBtn" title="Close">‚úï</button>
        </div>
      </div>

      <div class="tabs" id="tabs" role="tablist" aria-label="tabs"></div>

      <div class="body" id="body" aria-live="polite"></div>

      <div class="editor" id="editor">
        <input id="labelInput" class="input" placeholder="Label (mis. Refresh)" />
        <select id="actionType" class="select">
          <option value="alert">Alert</option>
          <option value="log">Console.log</option>
          <option value="copy">Copy text</option>
          <option value="custom">Custom JS</option>
        </select>
        <button class="btn" id="addBtn">Add</button>
      </div>

    </div>
  </div>
</div>

<script>
(function(){
  const $ = id => document.getElementById(id);
  const toast = (m,t=1100)=>{ const e=document.createElement('div'); e.className='toast'; e.textContent=m; document.body.appendChild(e); setTimeout(()=>e.remove(),t); };

  const STORE='overlay_gui_fixed_v1';
  const genId=()=> 'id_'+Math.random().toString(36).slice(2,9);

  // initial state
  let state = {
    pos:{x:20,y:20},
    tabs:[ { id: genId(), title:'Main', actions: [ { id: genId(), label:'Hello', type:'alert', payload:'Halo!' } ] } ],
    active:0,
    minimized:false
  };
  try{ const raw = localStorage.getItem(STORE); if(raw) state = JSON.parse(raw); }catch(e){ console.warn(e); }

  // refs
  const panelWrap = $('panelWrap'), panel = $('panel'), hdr = $('hdr');
  const tabsEl = $('tabs'), body = $('body'), editor = $('editor');
  const labelInput = $('labelInput'), actionType = $('actionType'), addBtn = $('addBtn');
  const addTabBtn = $('addTabBtn'), minBtn = $('minBtn'), closeBtn = $('closeBtn'), saveBtn = $('saveBtn'), inspectBtn = $('inspectBtn');

  // apply saved pos
  panelWrap.style.transform = `translate(${state.pos.x}px, ${state.pos.y}px)`;

  // DRAG realtime (no smoothing)
  let dragging=false, startPointer={x:0,y:0}, startPos={x:0,y:0};
  hdr.addEventListener('pointerdown', e=>{
    e.preventDefault();
    hdr.setPointerCapture(e.pointerId);
    dragging=true;
    panel.classList.add('dragging');
    startPointer = {x:e.clientX, y:e.clientY};
    startPos = {x: state.pos.x, y: state.pos.y};
  }, {passive:false});

  document.addEventListener('pointermove', e=>{
    if(!dragging) return;
    e.preventDefault();
    const nx = startPos.x + (e.clientX - startPointer.x);
    const ny = startPos.y + (e.clientY - startPointer.y);
    state.pos.x = nx; state.pos.y = ny;
    panelWrap.style.transform = `translate(${nx}px, ${ny}px)`;
  }, {passive:false});

  document.addEventListener('pointerup', e=>{
    if(!dragging) return;
    dragging=false;
    panel.classList.remove('dragging');
    try{ localStorage.setItem(STORE, JSON.stringify(state)); }catch(e){ console.warn(e); }
  });

  // render
  function render(){
    // minimized
    if(state.minimized){
      tabsEl.style.display='none';
      body.style.display='none';
      editor.style.display='none';
      minBtn.textContent='‚¨Ü';
    } else {
      tabsEl.style.display='';
      body.style.display='';
      editor.style.display='';
      minBtn.textContent='‚Äî';
    }

    // tabs
    tabsEl.innerHTML='';
    state.tabs.forEach((t,i)=>{
      const b = document.createElement('button');
      b.className = 'tab' + (i===state.active ? ' active' : '');
      b.textContent = t.title;
      b.addEventListener('click', ()=>{ state.active = i; render(); });
      b.addEventListener('contextmenu', ev=>{
        ev.preventDefault();
        const opt = prompt('rename / delete', 'rename');
        if(!opt) return;
        if(opt==='delete'){ if(confirm('Delete tab "'+t.title+'"?')){ state.tabs.splice(i,1); state.active = Math.max(0, state.active-1); save(); render(); } }
        else if(opt==='rename'){ const name = prompt('New name:', t.title); if(name){ t.title = name; save(); render(); } }
      });
      tabsEl.appendChild(b);
    });

    // actions: horizontal scroll row
    body.innerHTML = '';
    const cur = state.tabs[state.active] || state.tabs[0];
    const row = document.createElement('div');
    row.className = 'panel-row';
    (cur.actions || []).forEach(act=>{
      const btn = document.createElement('button');
      btn.className = 'action-btn';
      btn.textContent = act.label;
      btn.title = act.type + (act.payload ? ' ‚Äî ' + (act.payload.length>40 ? act.payload.slice(0,40)+'...' : act.payload) : '');
      btn.addEventListener('click', ()=> runAction(act));
      btn.addEventListener('contextmenu', ev=>{
        ev.preventDefault();
        const opt = prompt('edit / delete', 'edit');
        if(!opt) return;
        if(opt==='delete'){ if(confirm('Delete "'+act.label+'"?')){ cur.actions = cur.actions.filter(x=>x.id!==act.id); save(); render(); } }
        else if(opt==='edit'){
          const newLabel = prompt('Label:', act.label); if(newLabel) act.label = newLabel;
          const newPayload = prompt('Payload (alert/log/copy/custom):', act.payload || '') || '';
          act.payload = newPayload;
          save(); render();
        }
      });
      row.appendChild(btn);
    });
    // if no actions show hint
    if((cur.actions || []).length === 0){
      const h = document.createElement('div'); h.className='small'; h.style.padding='6px 0'; h.textContent='(No actions yet ‚Äî add using the form below)';
      row.appendChild(h);
    }
    body.appendChild(row);

    // ensure body scroll-left when new button added (optional: auto scroll to end)
    // body.scrollLeft = body.scrollWidth;

  }

  // actions runner
  function runAction(act){
    try{
      if(act.type === 'alert') alert(act.payload || act.label);
      else if(act.type === 'log') console.log(act.payload || act.label);
      else if(act.type === 'copy'){
        const txt = act.payload || act.label;
        if(navigator.clipboard && navigator.clipboard.writeText) navigator.clipboard.writeText(txt).then(()=> toast('Copied'));
        else { const ta = document.createElement('textarea'); ta.value = txt; document.body.appendChild(ta); ta.select(); document.execCommand('copy'); ta.remove(); toast('Copied'); }
      } else if(act.type === 'custom'){
        if(!confirm('Execute custom JS?')) return;
        (new Function(act.payload || ''))();
      }
    }catch(e){ console.error(e); toast('Action failed'); }
  }

  // controls
  addBtn.addEventListener('click', ()=>{
    const label = labelInput.value.trim(); if(!label){ toast('Masukkan label'); return; }
    const type = actionType.value; let payload = '';
    if(type==='alert') payload = prompt('Pesan alert:', 'Hello') || '';
    else if(type==='log') payload = prompt('Pesan console.log:', label) || '';
    else if(type==='copy') payload = prompt('Text untuk copy:', label) || '';
    else if(type==='custom') payload = prompt('Custom JS:', 'console.log(\"hi\")') || '';
    const cur = state.tabs[state.active] || state.tabs[0];
    cur.actions = cur.actions || [];
    cur.actions.push({ id: genId(), label, type, payload });
    labelInput.value = '';
    save(); render();
    // auto-scroll to end so newly added button visible
    setTimeout(()=> { body.scrollLeft = body.scrollWidth; }, 60);
  });

  addTabBtn.addEventListener('click', ()=>{
    const name = prompt('Nama tab baru:', 'Tools'); if(!name) return;
    state.tabs.push({ id: genId(), title: name, actions: [] });
    state.active = state.tabs.length - 1;
    save(); render();
  });

  minBtn.addEventListener('click', ()=>{ state.minimized = !state.minimized; save(); render(); });
  closeBtn.addEventListener('click', ()=>{ panelWrap.remove(); toast('Panel closed'); });
  saveBtn.addEventListener('click', ()=>{ save(); });

  // inspector
  let inspector=false, highlighted=null;
  inspectBtn.addEventListener('click', ()=>{
    inspector = !inspector;
    toast(inspector ? 'Inspect ON ‚Äî tap element' : 'Inspect OFF');
  });
  function onPointerOverInspect(e){
    if(!inspector) return;
    const el = e.target;
    if(el === panel || panel.contains(el)) return;
    if(highlighted && highlighted !== el) highlighted.classList.remove('_ov_highlight');
    highlighted = el;
    el.classList.add('_ov_highlight');
  }
  function onClickInspect(e){
    if(!inspector) return;
    e.preventDefault(); e.stopPropagation();
    const el = e.target; if(el === panel || panel.contains(el)) return;
    const path = domPath(el);
    console.log('INSPECT:', el, path);
    alert('Element selected ‚Äî lihat console untuk DOM path');
    if(highlighted){ highlighted.classList.remove('_ov_highlight'); highlighted = null; }
    inspector = false;
  }
  function domPath(el){
    const parts = [];
    while(el && el.nodeType === 1 && el !== document.body){
      let name = el.tagName.toLowerCase();
      if(el.id) name += '#'+el.id;
      else if(el.className) name += '.'+String(el.className).split(/\s+/).filter(Boolean).join('.');
      parts.unshift(name);
      el = el.parentElement;
    }
    return parts.join(' > ');
  }
  document.addEventListener('mouseover', onPointerOverInspect, true);
  document.addEventListener('click', onClickInspect, true);

  // save helper
  function save(){ try{ localStorage.setItem(STORE, JSON.stringify(state)); toast('Saved'); }catch(e){ console.warn(e); } }

  // responsive: ensure position stays reasonable on resize (but allow offscreen)
  window.addEventListener('resize', ()=>{
    // keep current pos, but ensure not NaN
    if(!state.pos || isNaN(state.pos.x) || isNaN(state.pos.y)) { state.pos = {x:20,y:20}; panelWrap.style.transform = `translate(${state.pos.x}px, ${state.pos.y}px)`; }
  });

  // initial
  render();
  panelWrap.style.transform = `translate(${state.pos.x}px, ${state.pos.y}px)`;

})();
</script>
</body>
</html>
