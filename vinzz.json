{
  "html": "<style>\n  :root{\n    --panel-w:380px;\n    --panel-bg: rgba(12,14,18,0.52);\n    --glass: rgba(255,255,255,0.04);\n    --accent: #4ea8ff;\n    --text: #e6eef8;\n    --muted: rgba(230,238,248,0.7);\n  }\n  html,body{height:100%;margin:0;font-family:Inter,system-ui,Segoe UI,Roboto,Arial;color:var(--text);-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;}\n  .overlay{position:fixed;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:2147483647}\n  .panel-wrap{position:absolute;left:0;top:0;width:var(--panel-w);max-width:94vw;pointer-events:auto;touch-action:none}\n  .panel{border-radius:12px;background:var(--panel-bg);backdrop-filter:blur(8px) saturate(120%);box-shadow:0 12px 40px rgba(4,6,12,0.6);overflow:hidden;border:1px solid rgba(255,255,255,0.03);transition:box-shadow 120ms}\n  .panel.dragging{transition:none}\n  .hdr{display:flex;align-items:center;gap:10px;padding:10px 12px;cursor:grab}\n  .hdr .left{display:flex;flex-direction:column}\n  .title{font-weight:700;font-size:15px}\n  .meta{font-size:12px;color:var(--muted)}\n  .actions{margin-left:auto;display:flex;gap:8px}\n  .btn{background:var(--glass);border:none;padding:8px 10px;border-radius:9px;color:var(--text);cursor:pointer;font-size:13px;display:inline-flex;align-items:center;gap:6px}\n  .btn:active{transform:translateY(1px)}\n  .tabs{display:flex;gap:6px;padding:8px 10px;overflow:auto;border-bottom:1px solid rgba(255,255,255,0.02)}\n  .tab{padding:8px 12px;border-radius:9px;cursor:pointer;font-weight:600;font-size:13px;background:transparent;flex:0 0 auto;color:var(--text)}\n  .tab.active{background:linear-gradient(90deg,rgba(78,168,255,0.16),rgba(78,168,255,0.06))}\n  .body{padding:12px;max-height:140px;overflow-x:auto;overflow-y:hidden;white-space:nowrap;-webkit-overflow-scrolling:touch}\n  .panel-row{display:inline-flex;flex-wrap:nowrap;gap:10px;padding-bottom:6px}\n  .action-btn{display:inline-block;padding:10px 14px;border-radius:10px;border:0;background:rgba(255,255,255,0.06);color:var(--text);cursor:pointer;white-space:nowrap;flex:0 0 auto}\n  .editor{padding:10px;border-top:1px solid rgba(255,255,255,0.03);display:flex;gap:8px;align-items:center}\n  .input{flex:1;padding:10px;border-radius:10px;border:0;background:rgba(255,255,255,0.02);color:var(--text);font-size:14px}\n  .select{max-width:160px;padding:9px;border-radius:8px;border:0;background:rgba(255,255,255,0.02);color:var(--text)}\n  .toast{position:fixed;right:18px;bottom:18px;padding:10px 14px;border-radius:10px;background:#07121a;color:var(--text);box-shadow:0 8px 24px rgba(0,0,0,0.45);z-index:9999999}\n  ._ov_highlight{outline:3px solid rgba(78,168,255,0.7);outline-offset:2px;background:linear-gradient(180deg,rgba(78,168,255,0.04),rgba(78,168,255,0.01))}\n  @media (max-width:480px){:root{--panel-w:86vw}.body{max-height:120px}}\n</style>\n\n<div class='overlay' id='overlay'>\n  <div class='panel-wrap' id='panelWrap' style='transform: translate(20px, 20px);'>\n    <div class='panel' id='panel' role='dialog' aria-label='overlay-gui'>\n      <div class='hdr' id='hdr'>\n        <div class='left'>\n          <div class='title'>Overlay GUI</div>\n          <div class='meta'>Draggable ‚Ä¢ Tabs ‚Ä¢ Swipe actions</div>\n        </div>\n        <div class='actions'>\n          <button class='btn' id='inspectBtn' title='Inspect element'>üîç</button>\n          <button class='btn' id='addTabBtn' title='Add tab'>‚ûï Tab</button>\n          <button class='btn' id='saveBtn' title='Save'>üíæ</button>\n          <button class='btn' id='minBtn' title='Minimize'>‚Äî</button>\n          <button class='btn' id='closeBtn' title='Close'>‚úï</button>\n        </div>\n      </div>\n\n      <div class='tabs' id='tabs' role='tablist' aria-label='tabs'></div>\n      <div class='body' id='body' aria-live='polite'></div>\n\n      <div class='editor' id='editor'>\n        <input id='labelInput' class='input' placeholder='Label (mis. Refresh)' />\n        <select id='actionType' class='select'>\n          <option value='alert'>Alert</option>\n          <option value='log'>Console.log</option>\n          <option value='copy'>Copy text</option>\n          <option value='custom'>Custom JS</option>\n        </select>\n        <button class='btn' id='addBtn'>Add</button>\n      </div>\n\n    </div>\n  </div>\n</div>",
  "js": "(function(){\n  const $ = id => document.getElementById(id);\n  const toast = (m,t=1100)=>{ const e=document.createElement('div'); e.className='toast'; e.textContent=m; document.body.appendChild(e); setTimeout(()=>e.remove(),t); };\n\n  const STORE='overlay_gui_fixed_v1';\n  const genId=()=> 'id_'+Math.random().toString(36).slice(2,9);\n\n  let state = {\n    pos:{x:20,y:20},\n    tabs:[ { id: genId(), title:'Main', actions: [ { id: genId(), label:'Hello', type:'alert', payload:'Halo!' } ] } ],\n    active:0,\n    minimized:false\n  };\n  try{ const raw = localStorage.getItem(STORE); if(raw) state = JSON.parse(raw); }catch(e){ console.warn(e); }\n\n  const panelWrap = $('panelWrap'), panel = $('panel'), hdr = $('hdr');\n  const tabsEl = $('tabs'), body = $('body'), editor = $('editor');\n  const labelInput = $('labelInput'), actionType = $('actionType'), addBtn = $('addBtn');\n  const addTabBtn = $('addTabBtn'), minBtn = $('minBtn'), closeBtn = $('closeBtn'), saveBtn = $('saveBtn'), inspectBtn = $('inspectBtn');\n\n  if(!panelWrap || !panel || !hdr){ console.warn('overlay init aborted: missing elements'); return; }\n\n  panelWrap.style.transform = 'translate('+state.pos.x+'px, '+state.pos.y+'px)';\n\n  let dragging=false, startPointer={x:0,y:0}, startPos={x:0,y:0};\n  hdr.addEventListener('pointerdown', e=>{\n    try{\n      e.preventDefault(); hdr.setPointerCapture(e.pointerId); dragging=true; panel.classList.add('dragging'); startPointer={x:e.clientX,y:e.clientY}; startPos={x:state.pos.x,y:state.pos.y};\n    }catch(err){}\n  }, {passive:false});\n\n  document.addEventListener('pointermove', e=>{\n    if(!dragging) return; e.preventDefault(); const nx = startPos.x + (e.clientX - startPointer.x); const ny = startPos.y + (e.clientY - startPointer.y); state.pos.x = nx; state.pos.y = ny; panelWrap.style.transform = 'translate('+nx+'px, '+ny+'px)';\n  }, {passive:false});\n\n  document.addEventListener('pointerup', e=>{\n    if(!dragging) return; dragging=false; panel.classList.remove('dragging'); try{ localStorage.setItem(STORE, JSON.stringify(state)); }catch(e){}\n  });\n\n  function render(){\n    if(state.minimized){ if(tabsEl) tabsEl.style.display='none'; if(body) body.style.display='none'; if(editor) editor.style.display='none'; if(minBtn) minBtn.textContent='‚¨Ü'; }\n    else{ if(tabsEl) tabsEl.style.display=''; if(body) body.style.display=''; if(editor) editor.style.display=''; if(minBtn) minBtn.textContent='‚Äî'; }\n\n    if(!tabsEl) return; tabsEl.innerHTML=''; state.tabs.forEach((t,i)=>{ const b = document.createElement('button'); b.className = 'tab' + (i===state.active ? ' active' : ''); b.textContent = t.title; b.addEventListener('click', ()=>{ state.active = i; render(); }); b.addEventListener('contextmenu', ev=>{ ev.preventDefault(); const opt = prompt('rename / delete', 'rename'); if(!opt) return; if(opt==='delete'){ if(confirm('Delete tab \"'+t.title+'\"?')){ state.tabs.splice(i,1); state.active = Math.max(0, state.active-1); save(); render(); } } else if(opt==='rename'){ const name = prompt('New name:', t.title); if(name){ t.title = name; save(); render(); } } }); tabsEl.appendChild(b); });\n\n    if(!body) return; body.innerHTML = ''; const cur = state.tabs[state.active] || state.tabs[0]; const row = document.createElement('div'); row.className = 'panel-row'; (cur.actions || []).forEach(act=>{ const btn = document.createElement('button'); btn.className = 'action-btn'; btn.textContent = act.label; btn.title = act.type + (act.payload ? ' ‚Äî ' + (act.payload.length>40 ? act.payload.slice(0,40)+'...' : act.payload) : ''); btn.addEventListener('click', ()=> runAction(act)); btn.addEventListener('contextmenu', ev=>{ ev.preventDefault(); const opt = prompt('edit / delete', 'edit'); if(!opt) return; if(opt==='delete'){ if(confirm('Delete \"'+act.label+'\"?')){ cur.actions = cur.actions.filter(x=>x.id!==act.id); save(); render(); } } else if(opt==='edit'){ const newLabel = prompt('Label:', act.label); if(newLabel) act.label = newLabel; const newPayload = prompt('Payload (alert/log/copy/custom):', act.payload || '') || ''; act.payload = newPayload; save(); render(); } }); row.appendChild(btn); }); if((cur.actions || []).length === 0){ const h = document.createElement('div'); h.className='small'; h.style.padding='6px 0'; h.textContent='(No actions yet ‚Äî add using the form below)'; row.appendChild(h); } body.appendChild(row);\n  }\n\n  function runAction(act){ try{ if(act.type === 'alert') alert(act.payload || act.label); else if(act.type === 'log') console.log(act.payload || act.label); else if(act.type === 'copy'){ const txt = act.payload || act.label; if(navigator.clipboard && navigator.clipboard.writeText) navigator.clipboard.writeText(txt).then(()=> toast('Copied')); else { const ta = document.createElement('textarea'); ta.value = txt; document.body.appendChild(ta); ta.select(); document.execCommand('copy'); ta.remove(); toast('Copied'); } } else if(act.type === 'custom'){ if(!confirm('Execute custom JS?')) return; (new Function(act.payload || ''))(); } }catch(e){ console.error(e); }\n  }\n\n  if(addBtn) addBtn.addEventListener('click', ()=>{ try{ const label = labelInput.value.trim(); if(!label){ toast('Masukkan label'); return; } const type = actionType.value; let payload = ''; if(type==='alert') payload = prompt('Pesan alert:', 'Hello') || ''; else if(type==='log') payload = prompt('Pesan console.log:', label) || ''; else if(type==='copy') payload = prompt('Text untuk copy:', label) || ''; else if(type==='custom') payload = prompt('Custom JS:', 'console.log(\\'hi\\')') || ''; const cur = state.tabs[state.active] || state.tabs[0]; cur.actions = cur.actions || []; cur.actions.push({ id: genId(), label, type, payload }); labelInput.value = ''; save(); render(); setTimeout(()=> { if(body) body.scrollLeft = body.scrollWidth; }, 60); }catch(e){} });\n\n  if(addTabBtn) addTabBtn.addEventListener('click', ()=>{ const name = prompt('Nama tab baru:', 'Tools'); if(!name) return; state.tabs.push({ id: genId(), title: name, actions: [] }); state.active = state.tabs.length - 1; save(); render(); });\n\n  if(minBtn) minBtn.addEventListener('click', ()=>{ state.minimized = !state.minimized; save(); render(); });\n  if(closeBtn) closeBtn.addEventListener('click', ()=>{ panelWrap.remove(); toast('Panel closed'); });\n  if(saveBtn) saveBtn.addEventListener('click', ()=>{ save(); });\n\n  let inspector=false, highlighted=null;\n  if(inspectBtn) inspectBtn.addEventListener('click', ()=>{ inspector = !inspector; toast(inspector ? 'Inspect ON ‚Äî tap element' : 'Inspect OFF'); });\n  function onPointerOverInspect(e){ if(!inspector) return; const el = e.target; if(el === panel || panel.contains(el)) return; if(highlighted && highlighted !== el) highlighted.classList.remove('_ov_highlight'); highlighted = el; el.classList.add('_ov_highlight'); }\n  function onClickInspect(e){ if(!inspector) return; e.preventDefault(); e.stopPropagation(); const el = e.target; if(el === panel || panel.contains(el)) return; const path = domPath(el); console.log('INSPECT:', el, path); alert('Element selected ‚Äî lihat console untuk DOM path'); if(highlighted){ highlighted.classList.remove('_ov_highlight'); highlighted = null; } inspector = false; }\n  function domPath(el){ const parts = []; while(el && el.nodeType === 1 && el !== document.body){ let name = el.tagName.toLowerCase(); if(el.id) name += '#'+el.id; else if(el.className) name += '.'+String(el.className).split(/\\s+/).filter(Boolean).join('.'); parts.unshift(name); el = el.parentElement; } return parts.join(' > '); }\n  document.addEventListener('mouseover', onPointerOverInspect, true);\n  document.addEventListener('click', onClickInspect, true);\n\n  function save(){ try{ localStorage.setItem(STORE, JSON.stringify(state)); toast('Saved'); }catch(e){ console.warn(e); } }\n\n  window.addEventListener('resize', ()=>{ if(!state.pos || isNaN(state.pos.x) || isNaN(state.pos.y)) { state.pos = {x:20,y:20}; panelWrap.style.transform = 'translate('+state.pos.x+'px, '+state.pos.y+'px)'; } });\n\n  render();\n  panelWrap.style.transform = 'translate('+state.pos.x+'px, '+state.pos.y+'px)';\n\n})();"
}
